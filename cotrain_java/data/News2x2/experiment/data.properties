# Parameters describing the dataset used in the experiment

#2016/06/08 08:30:23
#Wed Jun 08 08:30:23 CEST 2016

# All results will be recorded to the folder specified through resultFolder property 
resultFolder=./data/News2x2/result

# Random number generator seed used in the experiment
randomGeneratorSeed=2016

# If loadPresetExperiment=true: 
# 	 - An existing experiment will be loaded
#    - CV parameters (cv.properties) for creating a new experiment will be ignored 
# 	 - The program assumes that all files needed for the experiment are located in the resultFolder. The resultFolder 
#      should contain subfolders fold_0, fold_1,... which correspond to the folds of cross-validation (there must be at least one subfolder fold_0).
#      Each subfolder should contain CoTrainingData from that fold. 
#      CoTraining data is represeted as arff files: labeled_view0.arff, labeled_view1.arff, unlabeled_view0.arff, unlabeled_view1.arff, test_view0.arff, test_view1.arff 
#      and, optionaly, arff files for unlabeled pool. 
# If loadPresetExperiment=false:
#	- Program will create the new cross-validation experiment using the settings given in cv.properties 
# 	- Generally, given that the randomGeneratorSeed does not change, program will always generate the same experiment. However, using the
#     previously created experiment results in faster performance.
loadPresetExperiment=false

# Property dataFiles specifies the file names that contain the data for new CV-experiment creation. 
# These files are read only if loadPresetExperiment=false. 
# Each file corresponds to one view of the data (if there are multiple views assign multiple 
# datasets (e.g. dataFiles=dataset1.arff dataset2.arff))
# Specify the files as strings separated with whitespace character "path1" "path2"
# Currently, maximally two views are supported
dataFiles="./data/News2x2/News2x2_ViewA.arff" "./data/News2x2/News2x2_ViewB.arff"

# The desired number of views when creating a CV experiment. Read only if loadPresetExperiment=false. Currently only two views are supported
noViews=2

# Name of each class label. Specified as strings separated with whitespace character "className1" "className2" ...
# Since "positiveClass" class is registered first, all instances with prob(positiveClass) = prob(negativeClass) = 0.5 will be classified as "positiveClass"
classNames="positiveClass" "negativeClass"

# Name of the class attribute
classAttributeName=class

# Name of the id attribute (if the id attribute does not exist this value should be an empty String. 
# In this case the program will automatically assign numeric attribute under the name "ID") 
idAttributeName=

# Classification models used for individual view  classifiers in co-training.
# The used classification models must implement Weka Classifier interface.
# If there are multiple views of the data and only one classifier is defined:
# 	- The same classifier will be used for all views 
# Otherwise: 
#	- The number of classifiers must be the same as the number of views
#   - Specify the classifiers as strings separated with whitespace character "classifier1" "classifier2"
classifiers="weka.classifiers.bayes.NaiveBayes"

# Classification model used for the combined classifier: a classifier trained by merging all views in one single view (e.g. final classifier in RSSalg)
combinedClassifier=weka.classifiers.bayes.NaiveBayes






